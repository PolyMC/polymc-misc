<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>PolyMC Automated Builds.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/PolyMC/PolyMC/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/PolyMC/PolyMC.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/tags/*</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>@daily</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>rm -rf *.tar.zst *.zip *.deb *.AppImage {build_*}/prefix
git submodule init &amp;&amp; git submodule update
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>platform=&apos;win32&apos;
builddir=&quot;build_$platform&quot;

rm -rf $builddir/CMakeCache.txt
rm -rf $builddir/prefix/polymc.exe

i686-w64-mingw32-cmake -S . -B $builddir \
	-DCMAKE_INSTALL_PREFIX=&quot;$builddir/prefix/&quot; \
	-DCMAKE_BUILD_TYPE=Release \
    -DLauncher_BUILD_PLATFORM=$platform \
    -DLauncher_APP_BINARY_NAME=&quot;PolyMC&quot; \
    -G Ninja

ninja -v -j4 -C $builddir

ninja -C $builddir install
cp /usr/i686-w64-mingw32/bin/{Qt5{Core,Gui,Network,Widgets,Xml,Svg},lib{gcc_s_dw2-1,stdc++-6,ssp-0,winpthread-1,iconv-2,pcre2-16-0,harfbuzz-0,png16-16,glib-2.0-0,freetype-6,graphite2,intl-8,bz2-1,pcre-1,brotli{dec,common},crypto-1_1,ssl-1_1},zlib1}.dll $builddir/prefix/

cd $builddir/prefix
VER=`git describe --tags`

zip ../../$platform-$VER.zip -r *
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>rm -rf build_lin64-system/prefix

rm -rf build_lin64-system/CMakeCache.txt

cmake -S . -B build_lin64-system \
	-DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=&quot;/usr&quot; \
    -DLauncher_LAYOUT=lin-system \
    -DLauncher_SHARE_DEST_DIR=&quot;share/polymc&quot; \
    -G Ninja

ninja -j4 -C build_lin64-system

DESTDIR=prefix ninja -C build_lin64-system install
cd build_lin64-system/prefix
VER=`git describe --tags`
tar --zstd -cf ../../lin64-system-$VER.tar.zst .

export VERSION=$VER
DESTDIR=../AppDir ninja -C build_lin64-system install
rm -rf AppDir/usr/lib/jvm
mkdir -p AppDir/usr/lib/jvm &amp;&amp; \
    cp -r /usr/lib/jvm/java-{8,17}-openjdk AppDir/usr/lib/jvm
export LD_LIBRARY_PATH=AppDir/usr/lib
# This is total spaghetti but I frankly don&apos;t care.
LD_LIBRARY_PATH=&quot;$LD_LIBRARY_PATH&quot;:AppDir/usr/lib/jvm/java-17-openjdk/lib/server
LD_LIBRARY_PATH=&quot;$LD_LIBRARY_PATH&quot;:AppDir/usr/lib/jvm/java-17-openjdk/lib
LD_LIBRARY_PATH=&quot;$LD_LIBRARY_PATH&quot;:AppDir/usr/lib/jvm/java-8-openjdk/jre/lib/amd64/server
LD_LIBRARY_PATH=&quot;$LD_LIBRARY_PATH&quot;:AppDir/usr/lib/jvm/java-8-openjdk/jre/lib/amd64
linuxdeploy --appdir AppDir --output appimage -i program_info/org.polymc.PolyMC.svg --plugin qt

for i in &quot;&quot; &quot;-bin&quot;
do
	git stash
	git pull -r # for safety
    if [ &quot;`grep -e pkgver PKGBUILD`&quot; != &quot;pkgver=$VER&quot; ]
    then
    	cd aur/polymc$i
    	sed -i &quot;s/pkgver=.*/pkgver=$VER/&quot; PKGBUILD
    	updpkgsums
    	makepkg --printsrcinfo &gt; .SRCINFO
    	git commit -am &quot;Update to $VER&quot;
    	git push origin master
    	cd ../../mpr/polymc$i
        sed -i &quot;s/pkgver=.*/pkgver=$VER/&quot; PKGBUILD
        updpkgsums
        makedeb --printsrcinfo &gt; .SRCINFO
        git commit -am &quot;Update to $VER&quot;
        git push origin master
        cd ../../
    fi
done</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>VER=`git describe --tags`
mkdir -p /srv/polymc/{$VER,latest}/{win32,lin64-system,appimage}
cp lin64-system-$VER.tar.zst /srv/polymc/$VER/lin64-system
cp win32-$VER.zip /srv/polymc/$VER/win32
cp PolyMC-$VER-x86_64.AppImage /srv/polymc/$VER/appimage

cd /srv/polymc/
for pkg in $VER/*/*.{zip,zst,AppImage}
do
    sha256sum $pkg &gt; $pkg.sha256
done

ln -sfT $PWD/$VER/lin64-system/lin64-system-$VER.tar.zst latest/lin64-system/lin64-system.tar.zst
ln -sfT $PWD/$VER/lin64-system/lin64-system-$VER.tar.zst.sha256 latest/lin64-system/lin64-system.tar.zst.sha256
ln -sfT $PWD/$VER/win32/win32-$VER.zip latest/win32/win32.zip
ln -sfT $PWD/$VER/win32/win32-$VER.zip.sha256 latest/win32/win32.zip.sha256
ln -sfT $PWD/$VER/appimage/PolyMC-$VER-x86_64.AppImage latest/appimage/PolyMC-latest-x86_64.AppImage
ln -sfT $PWD/$VER/appimage/PolyMC-$VER-x86_64.AppImage.sha256 latest/appimage/PolyMC-latest-x86_64.AppImage.sha256</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>lin64-system*.tar.zst, win32*.zip, PolyMC*.AppImage</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
      <followSymlinks>false</followSymlinks>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
</project>